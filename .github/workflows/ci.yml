name: Strategy Finder CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8 (basic style check)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 strategy_finder.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 120 chars
        flake8 strategy_finder.py --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
    
    - name: Test basic functionality
      run: |
        # Create minimal test data
        python -c "
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Create 500 bars of test data
start = datetime(2023, 1, 1)
timestamps = [start + timedelta(minutes=i) for i in range(500)]
np.random.seed(42)
base_price = 41000

data = []
for i, ts in enumerate(timestamps):
    price = base_price + i * 2 + np.random.normal(0, 50)
    data.append({
        'open_time': int(ts.timestamp() * 1000),
        'open': price + np.random.normal(0, 10),
        'high': price + abs(np.random.normal(0, 20)),
        'low': price - abs(np.random.normal(0, 20)),
        'close': price,
        'volume': np.random.lognormal(2, 0.8)
    })

df = pd.DataFrame(data)
df.to_csv('ci_test_data.csv', index=False)
print('Created CI test data')
        "
        
        # Test basic functionality
        python strategy_finder.py --csv ci_test_data.csv --budget 10 --seed 42 --min_trades 0 --quick
        
        # Test parallel processing
        python strategy_finder.py --csv ci_test_data.csv --budget 8 --seed 42 --min_trades 0 --workers 2 --quick
        
        # Cleanup
        rm -f ci_test_data.csv search_results.csv best_*.png best_*.csv
        rm -rf runs/

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python test_phase1_integration.py
        python test_phase2_integration.py
    
    - name: Cleanup artifacts
      run: |
        rm -rf runs/
        rm -f *.csv *.png *.json phase1_test.csv